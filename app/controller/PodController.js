/*
 * File: app/controller/PodController.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Contacts.controller.PodController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.podcontroller',

    config: {
        refs: {
            podnavview: 'podnavview',
            podlist: 'podlist',
            podsublist: 'podsublist',
            poduserlist: 'poduserlist'
        },

        control: {
            "podlist": {
                itemtap: 'onPodListItemTap'
            },
            "podsublist": {
                itemtap: 'onPodSubListItemTap'
            }
        }
    },

    onPodListItemTap: function(dataview, index, target, record, e, eOpts) {

        Ext.Viewport.setMasked({ xtype: 'loadmask', message: 'Моля, изчакайте ...', indicator:true});

                var title = record.get('Pod_NameBg');
                var glavpod = record.get('Pod_Id');

                var store = Ext.getStore('PodSubJsonPStore',{
                    autoLoad:false
                });
                store.load(
                    {
                        params: {
                            glavpod: glavpod
                        },

                        callback: function(records, operation, success) {

                            if(success)
                            {
                                Ext.Viewport.setMasked(false);
                                this.getPodnavview().push({
                                    xtype:'podsublist',
                                    title: title
                                });

                            }
                            else
                            {
                                Ext.Viewport.setMasked(false);
                                Ext.Msg.alert('Събщение', 'Няма регистрирана такова лице.', Ext.emptyFn);
                            }
                        },
                        scope: this
                    });


    },

    onPodSubListItemTap: function(dataview, index, target, record, e, eOpts) {

        Ext.Viewport.setMasked({ xtype: 'loadmask', message: 'Моля, изчакайте ...', indicator:true});

        var podid = record.get('Pod_Id');
        var podname = record.get('Pod_NameBg');


        var store = Ext.getStore('PodUserJsonPStore',{
            autoLoad:false
        });
        store.load(
            {
                params: {
                    podid: podid
                },

                callback: function(records, operation, success) {

                    if(success)
                    {
                        Ext.Viewport.setMasked(false);
                        this.getPodnavview().push({
                            xtype:'poduserlist',
                            title: podname
                        });
                        console.log('success');
                    }
                    else
                    {
                        Ext.Viewport.setMasked(false);
                        Ext.Msg.alert('Събщение', 'Няма регистрирана такова лице.', Ext.emptyFn);
                        console.log('unsuccess');
                    }
                },
                scope: this
            });

    }

});